/* ScummVM - Graphic Adventure Engine
 *
 * ScummVM is the legal property of its developers, whose names
 * are too numerous to list here. Please refer to the COPYRIGHT
 * file distributed with this source distribution.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

#include "common/system.h"
#include "graphics/palette.h"
#include "wasteland/wasteland1/views/dialogs/title.h"
#include "wasteland/core/file.h"
#include "wasteland/wasteland1/files/vertical_xor_stream.h"
#include "wasteland/keymapping.h"
#include "wasteland/wasteland1/core/text_decoder.h"

namespace Wasteland {
namespace Wasteland1 {
namespace Views {
namespace Dialogs {

#define TITLE_W 288
#define TITLE_H 128

static const byte TEXT_OLD[] = {
	0x20, 0x65, 0x74, 0x61, 0x6E,
	0x69, 0x6F, 0x0D, 0x73, 0x72, 0x64, 0x00, 0x6C,
	0x63, 0x70, 0x6D, 0x75, 0x68, 0x79, 0x77, 0x66,
	0x62, 0x76, 0x3A, 0x38, 0x2E, 0x39, 0x31, 0x67,
	0x21, 0x71, 0x36, 0x2D, 0x27, 0x7F, 0x7F, 0x7F,
	0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
	0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F,
	0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x0A,
	0x00, 0xE4, 0x00, 0x0D, 0x01, 0x73, 0x01, 0xB5,
	0x01, 0xEB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1F, 0x58, 0x68, 0x22, 0x19, 0x52, 0x1A, 0xF0,
	0x23, 0x09, 0x04, 0x06, 0x51, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x5F, 0x88, 0x08, 0xC9, 0xB1, 0x21, 0x81,
	0x77, 0xC9, 0x28, 0xD8, 0x44, 0x31, 0x04, 0x01,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x70, 0xC9, 0x40, 0xC5,
	0x24, 0x70, 0x29, 0xA0, 0x40, 0x04, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0xB3, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3F, 0xFD, 0xF0, 0xC8, 0x0B, 0x1F, 0x3C, 0xF3,
	0xC3, 0x13, 0xAF, 0x3A, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x70, 0x0E, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xF0, 0xCD, 0x38, 0x99, 0x0A,
	0x8F, 0x02, 0x6C, 0x8D, 0x7F, 0xF8, 0x02, 0x63,
	0x50, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38,
	0x00, 0x00, 0x00, 0x00, 0x00, 0xBE, 0x10, 0x11,
	0x92, 0x63, 0x43, 0x02, 0xEF, 0x92, 0x51, 0xB0,
	0x89, 0x62, 0x08, 0xCA, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x67, 0x1D, 0x00, 0x00, 0x00, 0x00, 0xF8,
	0x99, 0x8A, 0x10, 0x81, 0x80, 0x2A, 0x81, 0x1F,
	0x6C, 0x10, 0xE0, 0xDD, 0xB0, 0xAC, 0xA0, 0x08,
	0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0xC0,
	0x17, 0x5F, 0xFD, 0x03, 0x36, 0x24, 0x54, 0x0C,
	0x01, 0x55, 0x02, 0xFF, 0x4A, 0x8B, 0x23, 0x30,
	0xE0, 0x3F, 0x80, 0x23, 0xB1, 0x80, 0x00, 0x00,
	0xE0, 0x9C, 0x05, 0xEB, 0x78, 0xC7, 0x46, 0x0B,
	0xE0, 0x02, 0x1F, 0xFC, 0xF0, 0xC9, 0x0B, 0x1F,
	0xCF, 0xF2, 0x32, 0x8C, 0x04, 0xC0, 0x05, 0x5B,
	0x6B, 0x7C, 0x96, 0x47, 0x62, 0x08, 0x88, 0x2E,
	0xF0, 0xCA, 0x07, 0x4F, 0x7D, 0xF3, 0xC6, 0x13, 0xB0, 0xCF, 0x59, 0x20, 0x07, 0xF8, 0x66, 0x9E,
	0x83, 0x22, 0x24, 0xA0, 0x02, 0x0D, 0x04, 0x05, 0x50, 0x48, 0x11, 0x65, 0x88, 0x62, 0x03, 0x18,
	0x4D, 0x14, 0x3B, 0x44, 0x50, 0xF9, 0xAC, 0x03, 0xBC, 0x2A, 0x8E, 0x99, 0x37, 0x44, 0x69, 0x00,
	0x19, 0x06, 0x45, 0x31, 0x04, 0x01, 0x61, 0x80, 0x88, 0x01, 0x4C, 0x93, 0x98, 0xFA, 0x03, 0x9D,
	0x05, 0x5C, 0x32, 0x95, 0x85, 0x87, 0x00, 0x1D, 0x85, 0x81, 0x41, 0x14, 0x98, 0x23, 0x81, 0x90,
	0xA0, 0x13, 0x08, 0x0C, 0x04, 0x90, 0x79, 0xE1, 0x2C, 0xF0, 0x86, 0x7A, 0x81, 0x00, 0x97, 0x02,
	0x42, 0x60, 0xC4, 0x30, 0x14, 0x98, 0x45, 0x44, 0x20, 0x62, 0x28, 0x09, 0x14, 0x82, 0x06, 0x09,
	0x67, 0x01, 0x40, 0xA5, 0x30, 0x1E, 0xCA, 0x67, 0xF9, 0x06, 0x53, 0x0A, 0x44, 0x80, 0x66, 0x88,
	0x2A, 0xA2, 0x18, 0x72, 0xCF, 0xF2, 0xB1, 0xF0, 0x08, 0x9A, 0x21, 0x2D, 0x10, 0x91, 0x86, 0x28,
	0x86, 0x20, 0x60, 0x28, 0x48, 0x43, 0x95, 0x21, 0x8A, 0x21, 0x67, 0xB9, 0x64, 0x14, 0x6C, 0x01,
	0xA4, 0x41, 0x94, 0x79, 0x00, 0x09, 0x93, 0x1E, 0x02, 0x83, 0x28, 0xF0, 0xA0, 0x18, 0xA2, 0x18,
	0x82, 0xF2, 0x59, 0x49, 0x1E, 0x99, 0x17, 0xA2, 0x99, 0x80, 0x15, 0x1A, 0x40, 0x33, 0x44, 0x14,
	0x02, 0x03, 0x02, 0x85, 0x00, 0x11, 0xC3, 0x59, 0x7E, 0x0E, 0x24, 0x02, 0x1B, 0x44, 0xF5, 0xB3,
	0x00, 0xAD, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x02, 0x00,
	0x02, 0x02, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00,
	0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00,
	0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x02, 0x00, 0x02, 0x01, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

static const char *const TEXT0[] = {
	"",
	"\r         Electronic Arts and          \r        Interplay Productions         \r           proudly present            \r\r",
	"              WASTELAND!              \r\r         Copyright 1986-88 by         \r        Interplay Productions.        \r",
	"\r       Written by Alan Pavlish        \r    IBM version by Michael Quarles    \r\r"
};
static const char *const TEXT1[] = {
	"",
	"\rPlace : EARTH\r",
	"Year  : 1998\r",
	"Status: DEFCON 1\r\r"
};
static const char *const TEXT2[] = {
	"\r Computer defense initiative activated.\r",
	"\r Diplomatic solutions to the world's\r",
	" problems fail and war erupts as some\r",
	" madmen press ahead with their insane\r"
};
static const char *const TEXT3[] = {
	" dreams.\r",
	"Current condition:\r",
	"High concentrations of radiation\r",
	"produce random storms and mutations.\r"
};
static const char *const TEXT4[] = {
	"Somehow life continues in the\r",
	"Wasteland!\r"
};
static const char *const *const TEXT[5] = { TEXT0, TEXT1, TEXT2, TEXT3, TEXT4 };


Title::Title() : Dialog("Title"), _start(this, "Start", "START", 18, 24) {
	// Debug
	TextDecoder dec(TEXT_OLD);
}

bool Title::msgAction(const ActionMessage &msg) {
	if (msg._action == KEYBIND_SELECT)
		replaceView("Roster");
	return true;
}

bool Title::msgGame(const GameMessage &msg) {
	if (msg._name == "Start")
		replaceView("Roster");
	return true;
}

void Title::draw() {
	Surface s = getSurface();
	s.clear();
	s.blitFrom(_surface, Common::Point(8, 8));

	s.setFont(1);
	drawFrame(Common::Rect(0, 0, 37, 17));
	drawFrame(Common::Rect(0, 17, 39, 24));
	s.writeChar(94, 0, 17);
	s.writeChar(95, 37, 17);

	const unsigned char WASTELAND[17] = {
		0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x64, 0x6e, 0x70,
		0x74, 0x72, 0x82, 0x82, 0x82, 0x82, 0x7c, 0x7a
	};
	for (int i = 0; i < 17; ++i) {
		s.writeChar(WASTELAND[i], 38, i);
		s.writeChar(WASTELAND[i] + 1);
	}

	// TODO: Write intro text
	s.setFont(0);
	s.writeString("TESTING 012345", 3, 22);
}

bool Title::msgFocus(const FocusMessage &msg) {
	Dialog::msgFocus(msg);

	// Open title pic file for access
	File f("title.pic");
	VerticalXorStream xorStream(&f, TITLE_W, DisposeAfterUse::NO);

	// Load into surface
	_surface.create(TITLE_W, TITLE_H);
	byte *pDest = (byte *)_surface.getPixels();
	xorStream.read(pDest, TITLE_W * TITLE_H);

	return true;
}

bool Title::msgUnfocus(const UnfocusMessage &msg) {
	Dialog::msgUnfocus(msg);
	_surface.clear();
	return true;
}

void Title::timeout() {
}

} // namespace Dialogs
} // namespace Views
} // namespace Wasteland1
} // namespace Wasteland
